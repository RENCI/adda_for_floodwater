###################
Configuration Files
###################

Floodwater uses a series of YAML configuration files to define how
the system will operate. These files are designed to be re-used so that
only minimal changes are required to reuse files for different suites.

The required configuration files are:

* `Suite Configuration File` - This defines the basic operation of the suite, i.e. the
  name of the suite, which options will be turned on and off, the locations of other files,
  and the model geometries to be used.
* `Credentials File` - This file defines the credentials used to access parts of the system
  which are.
* `System Configuration File` - This file defines the information that is specific to a particular
  system. This includes the location of any executables that are necessary as well as the type of
  queueing system.

There are some configuration files which are optional:

* `APSViz Configuration File` - This file optionally defines how to interact with the APSViz system
* `FloodID Configuration File` - This file optionally defines how to interact with the FloodID system

All YAML configuration files are validated against a schema, which will throw errors if it is not
adhered to.

Additionally, there is a json configuration file that is specific to each model geometry that is used within
the system. This file is used to define specific model settings used within each specific model, and can range
from the physics implementations to the locations of boundary conditions which should be used.

************************
Suite Configuration File
************************

The suite configuration file defines the basic operation of the suite. It is a YAML file with the
following structure. Note that some parameters are optional.

.. code-block:: yaml

    prefix: <string>
    directory: <string>
    system_config: <string>
    credential_file: <string>
    project_code: <string> (optional)
    start: <datetime>
    compute:
        adcirc_compute_cores: <int>
        adcirc_writer_cores: <int> (optional)
        adcirc_memory: <string>
        processing_cores: <int>
        processing_memory: <string>
        hours_per_padcirc_day: <float>
        hours_per_padcswan_day: <float>
        hecras_compute_cores: <int> (optional)
        hecras_memory: <string> (optional)
        hours_per_hecras_day: <float> (optional)
        xbeach1d_compute_cores: <int> (optional)
        xbeach1d_memory: <string> (optional)
        hours_per_xbeach1d_day: <float> (optional)
        max_hours_per_xbeach1d_transect: <float> (optional)
    simulation:
        water_level: <float>
        forecast_length: <int> (optional)
        meteo: <string>
        storm: <string> (optional)
        storm_name: <string> (optional)
        basin: <string> (optional)
        year: <int> (optional)
        advisory: <int> (optional)
        ensemble_members: <dict> (optional)
        initialization_skip: <int> (optional)
        models:
            adcirc:
                <adcirc model configuration>, See below
            hecras:
                <hecras model configuration> (optional), See below
            xbeach-1d:
                <xbeach-1d model configuration> (optional), See below
    archive:
        s3:
            enabled: <bool>
            bucket: <string>
    external_services:
        apsviz:
            enabled: <bool>
            config: <string>
        floodid:
            enabled: <bool>
            config: <string>
    alerts:
        push:
            enabled: <bool>
            interval: <int>

A minimal ADCIRC suite configuration which runs using the Global Forecast System (GFS) meteorology would look like this:

.. code-block:: yaml

    prefix: "my_suite"
    directory: "/home/user/floodwater"
    system_config: "/path/to/my_system_config.yml"
    credential_file: "/path/to/my_credentials.yml"
    start: "2018-09-01 00:00:00"
    compute:
        adcirc_compute_cores: 16
        adcirc_memory: "32GB"
    simulation:
        water_level: 0.0
        meteo: gfs
        models:
            adcirc: <See ADCIRC Configuration>

Model Specific Schemas
======================

The model specific schemas are shown below.

ADCIRC
------

The ADCIRC model is the only model that is required at this time, though,
we expect that future iterations of the forecast system will remove this limitation

.. code-block:: yaml

    adcirc:
        geometry: <string>
        geometry_name: <string> (optional)
        waves: <bool>
        meteo_domain: <list of floats> (optional)
        meteo_resolution: <float> (optional)
        meteo_background_domain: <list of floats> (optional)
        meteo_background_resolution: <float> (optional)
        station_file: <string> (optional)
        postprocessing:
            analysis:
                plots: <bool>
                scripts:
                    - name: <string>
                      enabled: <bool>
                      script: <string>
                      args: <string> (optional)
                      duration: <int> (optional)
            forecast:
                plots: <bool>
                scripts:
                    - name: <string>
                      enabled: <bool>
                      script: <string>
                      args: <string> (optional)
                      duration: <int> (optional)

A minimal ADCIRC configuration would look like this:

.. code-block:: yaml

    adcirc:
        geometry: /path/to/geometry

This very simple configuration would run the ADCIRC model with default
settings for the meteorological domain, though this is rarely what you would
want. A more complete configuration would look like this:

.. code-block:: yaml

    adcirc:
        geometry: /path/to/geometry
        meteo_domain: [ -98.0, 25.0, -88.0, 31.0 ]
        meteo_resolution: 0.10

Full ADCIRC configuration options
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The complete list of options for the ADCIRC model are described below.
There are many optional parameters which can be edited and updated as
the user sees fit.

* geometry
    The path to the ADCIRC geometry file. This is a required parameter
* geometry_name (optional)
    The name of the geometry. This is used in the case that a user wants to override the name specified in the model configuration file
* waves
    A boolean value which indicates whether or not to run the wave model (SWAN)
* meteo_domain (optional)
    A list of floats which defines the domain of the meteorological forcing. The order of the list is [min_lon, min_lat, max_lon, max_lat]
* meteo_resolution (optional)
    The resolution of the meteorological forcing in degrees
* meteo_background_domain (optional)
    A list of floats which defines the domain of the meteorological background forcing. The order of the list is [min_lon, min_lat, max_lon, max_lat]. This will be used in the case that your configuration has multiple types of forcing, i.e. HWRF on top of GFS
* meteo_background_resolution (optional)
    The resolution of the meteorological background forcing in degrees
* station_file (optional)
    The path to the station file. This is a file which contains a list of stations which will be used to extract time series data from the ADCIRC output
* postprocessing / forecast (optional)
    A dictionary which defines the postprocessing options for the ADCIRC model and which phase of simulation they will run for.
    The :code:`plots` option is a boolean value which indicates whether or not to run the plotting scripts for the ADCIRC model using FigureGen.
    These have a moderate value for rapid QAQC, but are not necessary for the operation of the system. The scripts dictionary allows the
    user to execute an arbitrary script at the end of the simulation. This is useful for one-off items which are not necessary to include within
    the Floodwater system as a whole. The user can provide the name of the script, the path to the script, and any arguments that should be passed
    to the script. The duration parameter is the expected duration of the script so it can be monitored by the system.

HEC-RAS
-------

The HEC-RAS model is an optional model which can be run in addition to the ADCIRC model. It is not required for the operation of the system.
HEC-RAS can be forced at its boundary with water levels from the ADCIRC model and wind and pressure data from the specified meteorological
source. Currently, the model must consist only of a single 2D domain. It is expected that future iterations of the system will support the use
of multiple 2D domains. Additionally, the system is configured and tested for HEC-RAS 6.1. The system is unlikely to work with versions prior to
6.1 and it is unknown if the system works with versions later than 6.1.

.. code-block:: yaml

    hecras:
        geometry: <string>
        geometry_name: <string> (optional)
        meteo_domain: <list of floats> (optional)
        meteo_resolution: <float> (optional)
        postprocessing: (optional)
            analysis:
                raster: <bool>
            forecast:
                raster: <bool>
            raster_topography: <string>
            raster_resolution: <float>
            raster_bounding_box: <list of floats>

A minimal HEC-RAS configuration would look like this:

.. code-block:: yaml

    hecras:
        geometry: /path/to/geometry

This very simple configuration would run the HEC-RAS model with default settings for the meteorological domain, though this is rarely what you would
want. A more complete configuration would look like this:

.. code-block:: yaml

    hecras:
        geometry: /path/to/geometry
        meteo_domain: [ -98.0, 25.0, -88.0, 31.0 ]
        meteo_resolution: 0.10


Full HEC-RAS configuration options
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The complete list of options for the HEC-RAS model are described below.

* geometry
    The path to the HEC-RAS geometry file. This is a required parameter
* geometry_name (optional)
    The name of the geometry. This is used in the case that a user wants to override the name specified in the model configuration file
* meteo_domain (optional)
    A list of floats which defines the domain of the meteorological forcing. The order of the list is [min_lon, min_lat, max_lon, max_lat]
* meteo_resolution (optional)
    The resolution of the meteorological forcing in degrees
* postprocessing / forecast (optional)
    The postprocessing options center around computing a peak water surface elevation raster, which is used for display on the web interfaces
    that the system connects to. The raster option is a boolean value which indicates whether or not to run the raster generation scripts for the HEC-RAS model.
    Additionally, since HEC-RAS uses a subgrid methodology, to generate meaningful water level information, the user must supply a raster so that the
    wet/dry mask can be computed. The user will also need to supply information about where the raster should be created and at what resolution.

XBeach-1D
---------

The XBeach-1D model is an optional model which can be run in addition to the ADCIRC model. It is not required for the operation of the system.
XBeach-1D can be forced at the transect starting locations with water levels and wave information from the ADCIRC+SWAN model. The simulations
are run in parallel, with each transect being run on a separate core.

.. code-block:: yaml

    xbeach-1d:
        geometry: <string>
        geometry_name: <string> (optional)
        transect_selection_method:
            proximity:
                x: <float>
                y: <float>
                radius: <float>
                wave_height: <float> (optional)
            conditions:
                wave_height: <float> (optional)

A minimal XBeach-1D configuration would look like this:

.. code-block:: yaml

    xbeach-1d:
        geometry: /path/to/geometry

This very simple configuration would run the XBeach-1D model with default settings for the transect selection method. A more complete configuration would look like this:

.. code-block:: yaml

    xbeach-1d:
        geometry: /path/to/geometry
        transect_selection_method:
            proximity:
                x: -97.0
                y: 28.0
                radius: 0.5
                wave_height: 0.5

This would select transects within 0.5 degrees of the point (-97.0, 28.0) and would only select transects which have a wave height of at least 0.5 meters.

Full XBeach-1D configuration options
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The complete list of options for the XBeach-1D model are described below.

* geometry
    The path to the XBeach-1D geometry file. This is a required parameter
* geometry_name (optional)
    The name of the geometry. This is used in the case that a user wants to override the name specified in the model configuration file
* transect_selection_method
    The transect selection method can be either proximity or conditions. The proximity method selects transects based on their proximity to a point
    and the conditions method selects transects based on their conditions. The proximity method requires the user to specify the x and y coordinates
    of the point and the radius of the circle around the point. The conditions method requires the user to specify the wave height that the transect
    must have in order to be selected.

****************
Credentials File
****************

The credentials file is used to define the credentials used to access parts of the system. This information has been specifically
removed from other files so that other files can be shared without sharing credentials mistakenly. The file is a YAML file with the
following structure:

.. code-block:: yaml

    metget_api_key: <metget_api_key>
    metget_endpoint: <metget_server_address>
    metget_api_version: 2
    pushover_app_token: <pushover_app_token> (optional)
    pushover_user_token: <pushover_user_token> (optional)
    apsviz_rmq_username: <apsviz_rmq_username> (optional)
    apsviz_rmq_password: <apsviz_rmq_password> (optional)
    floodid_database_user: <floodid_database_user> (optional)
    floodid_database_password: <floodid_database_password> (optional)

*************************
System Configuration File
*************************

The system configuration file is meant to be shareable to others who are running on the same system, but not necessarily
the same workflows. This file is a YAML file with the following structure:

.. code-block:: yaml

    site_name: <string>
    physical_location: <string>
    scheduler_control_file: <string>.h
    mpi_launch_command: <mpirun or srun>
    system_modules_config: /path/to/system_modules.h
    adcirc: /path/to/adcirc/build
    xbeach: /path/to/executable/xbeach
    hecras_container: /path/to/hecras/singularity/image/hec_ras.sif
    singularity: /path/to/executable/singularity
    figuregen_home: /path/to/executable/figuregen
    scheduler: slurm
    account: <string>
    cores-per-node: <int>
    compute_partition: <string>
    processing_partition: <string>
    postproc_time_limit: <time_string>

Full System Configuration Options
=================================

The complete list of options for the system configuration file are described below.

* site_name
    The name of the site. This is used for annotation purposes for the user and APSViz
* physical_location
    The physical location of the system. This is used for annotation purposes for the user and APSViz
* scheduler_control_file
    The scheduler control file is used to define the header information that is used in the batch job submission. This is
    usually somewhat system specific. Provide the file with a :code:`.h` extension
* mpi_launch_command
    The command to use to launch MPI jobs. This is usually :code:`mpirun` or :code:`srun`
* system_modules_config
    The system modules configuration file is used to define the modules that are loaded on the system. This is usually
    somewhat system specific. Provide the file with a :code:`.h` extension
* adcirc
    The path to the directory with the ADCIRC executables. This must contain :code:`padcirc`, :code:`padcswan`, and :code:`aswip`
* xbeach
    The path to the XBeach-1D executable. This must be a compiled executable which will run in serial mode
* hecras_container
    The path to the HEC-RAS singularity container. This must be a singularity container which contains the HEC-RAS executable
    that has been added to the path
* singularity
    The path to the singularity executable
* figuregen_home
    The path to the FigureGen executable
* scheduler
    The scheduler to use. Currently, only :code:`slurm` is supported
* account
    The account to use for batch job submission
* cores-per-node
    The number of cores per node on the system
* compute_partition
    The name of the partition to use for compute jobs
* processing_partition
    The name of the partition to use for postprocessing jobs
* postproc_time_limit
    The time limit to use for postprocessing jobs. Should be in the format accepted by the job scheduler

*************************
APSViz Configuration File
*************************

The APSViz configuration file is used to define the connection information for the APSViz system. This file is a YAML file with the
following structure:

.. code-block:: yaml

    s3:
      bucket: <string>
    thredds:
      config:
       - name: <string>
         protocol: ftpgo
         server: <string>
         server_download: <string>
         port: <int>
         username: <string>
         base_directory: /path/to/thredds/directory
         rsa_keyfile: /path/to/rsa/keyfile.rsa
    messaging:
      rmq:
        host: <string>
        runtime_queue: <string>
        adcirc_properties_queue: <string>
        generic_properties_queue: <string>


Full APSViz Configuration Options
=================================

The complete list of options for the APSViz configuration file are described below.

* s3: The s3 key is used to define the connection information for the S3 bucket which is used to store the APSViz data. In the case of HEC-RAS, a geotiff is published to an S3 bucket
    * bucket: The name of the S3 bucket
* thredds
    * config
        * name: Name of the thredds server instance. Used only for annotation purposes
        * protocol: The protocol to use to connect to the server. Currently, only :code:`ftpgo` is supported
        * server: The server to connect to
        * server_download: The server to connect to for downloading files
        * port: The port to connect to
        * username: The username to use to connect to the server
        * base_directory: The base directory to use for the server
        * rsa_keyfile: The path to the RSA keyfile to use for the server
* messaging
    * rmq
        * host: The host to use for the RabbitMQ server
        * runtime_queue: The name of the runtime queue to use
        * adcirc_properties_queue: The name of the ADCIRC properties queue to use
        * generic_properties_queue: The name of the generic properties queue to use

**************************
FloodID Configuration File
**************************

The FloodID configuration file is used to define the connection information for the FloodID system. This file is a YAML file with the
following structure:

.. code-block:: yaml

    dashboards:
      enabled: true
      server: <address>
      port: <port>
      database_default: <string>
      environment: <string>
      databases:
        - direct_damage
      # - search_rescue
      # - response_infrastructure
        - roadway

Full FloodID Configuration Options
==================================

The complete list of options for the FloodID configuration file are described below.

* dashboards
    * enabled: A boolean value which indicates whether or not to enable the dashboards
    * server: The server to connect to
    * port: The port to connect to
    * database_default: The default database to use
    * environment: The environment to use (i.e. dev or prod)
    * databases: A list of databases to use. These may be:
        * direct_damage
        * search_rescue
        * response_infrastructure
        * roadway

**********************************
Model Geometry Configuration Files
**********************************

ADCIRC
======

The ADCIRC configuration file is used to set the parameters used within the model, including model time step,
nodal attributes included in the model, physics settings, boundary conditions, and model geometry name.
The file is ALWAYS named :code:`config.json` and resides in a folder which contains the raw model files and any prepared
decompositions.

Mesh decomposition is typically a process that is a nontrivial time consideration. The script :code:`floodwater_adcirc_generate_prepdir`,
which is installed with the system, can generate a pre-packaged decomposition archive automatically. The output from this
script should be stored alongside the other files in this mesh data directory. It will be named something like :code:`decomp001023.tar.gz`.
Note that the number of cores provided should be the number of compute cores, not the total number of cores (i.e. including writier
processors).

.. code-block:: json

    {
        "name": "mesh_name",
        "dt": 2.0,
        "attributes": [
            "surface_submergence_state",
            "surface_canopy_coefficient",
            "mannings_n_at_sea_flood",
            "sea_surface_height_above_geoid"
        ],
        "physics": {
            "preset": "standard"
        },
        "usgs_flow_stations": [
            "none",
            "07374000",
            "07381490"
        ],
        "rfc_flow_stations": [
            "none",
            "btrl1",
            "smml1"
        ],
        "stage_discharge_relationship": [
            "none",
            "mississippi_river_stage_discharge.csv",
            "atchafalaya_river_stage_discharge.csv"
        ],
        "tide_boundary": {
            "Q1": [ "amplitude", "phase" ],
            "O1": [ "amplitude", "phase" ]
        }
    }


A description of the keys used in the model configuration file are below:

* name
    The name of the mesh geometry. This is used for annotation purposes for the user
* dt
    The ADCIRC time step to use in seconds
* attributes
    Attributes in the fort.13 nodal attributes file to be included in simulations
* physics
    The physics key is used to set up the model physics and solver parameters. The preset key is used to select from a number of canned configurations. Subsequent keys can be used to modify the presets.

    * preset
        The following presets can be selected: standard, explicit, pringle, jjw

        * standard preset
            implicit solver, eddy viscosity turbulence model with 2.0 coefficient, time weighting = 0.35, 0.30, 0.35, Garratt wind drag with 0.0025 limit, 0.0010 bottom friction limit, tau0 = 0.005, advection disabled, implicit gravity wave disabled

        * explicit preset
            explicit solver, Smagorinsky turbulence with 0.2 coefficient, time weighting = 0.00, 1.00, 0.00, Garratt wind drag with 0.0025 limit, 0.0010 bottom friction limit, tau0 = 0.005, advection enabled, implicit gravity wave disabled

        * pringle preset
            implicit solver, Smagorinsky turbulence with 0.2 coefficient, time weighting = 0.50, 0.50, 0.00, Garratt wind drag with 0.0025 limit, 0.0010 bottom friction limit, tau0 = 8/5*dt, advection enabled, implicit gravity wave enabled

        * jjw preset
            implicit solver, Smagorinsky turbulence with 0.2 coefficient, time weighting = 0.80, 0.20, 0.00, Garratt wind drag with 0.0025 limit, 0.0010 bottom friction limit, tau0 = 0.05, advection enabled, implicit gravity wave enabled, direct velmin calculation enabled

    * additional keys
        The following are additional keys which can be specified to update the model configuration

        * time_weighting_coefficients
            Set using a json array of a, b, c
        * solver
            Set to either "implicit" or "explicit"
        * turbulence_model
            Set to either `eddy_viscosity` or `smagorinsky`. Requires setting an associated value in subsequent key
        * eddy_viscosity_coefficient
            Sets the global eddy viscosity coefficient if not using a spatially varying coefficient in the fort.13
        * smagorinsky_coefficient
            Sets the Smagorinsky coefficient. Note, does not need to be set to negative as is done in the fort.15
        * h0
            Sets the minimum depth for wetting/drying
        * velmin
            Sets the minimum velocity for wetting/drying
        * wind_drag_formula
            Sets the wind drag formula to use (`garratt` or `powell`)
        * wind_drag_limit
            Sets the wind drag limit to use
        * bottom_friction_limit
            Sets the bottom friction limit to use in Manning's n based simulations
        * tau0
            Sets the tau0 parameter as specified in the fort.15. All typical fort.15 rules apply
        * advection
            Set to True to turn advection on or False to turn advection off
        * use_direct_velmin
            Set to True to activate direct calculation of velmin in wetting/drying
        * self_attraction_and_loading
            Set to True to activate self attraction and loading terms (:code:`fort.24` or :code:`fort.24.nc`)
        * swan_max_iterations
            Sets the maximum number of iterations for the SWAN model
        * swan_convergence_npts
            Sets the percentage of points which must converge for the SWAN model
        * coordinate_system
            Sets the coordinate system to use. This is passed as the :code:`ICS` variable to ADCIRC
        * quadratic_friction_coefficient
            If using a quadratic friction coefficient, this sets the value of the coefficient
        * coordinate_rotation
            If using a rotated coordinate system, this sets the rotation. This should be a list of two values

    * usgs_flow_stations
        For models which have rivers, specification of the USGS flow stations to use for real time data. This should be associated with a type=22 or type=32 boundary condition. The list should match the order in which they appear in the fort.14 file
    * rfc_flow_stations
        For models which have rivers, specification of the River Forecast Center (RFC) for predicted flow data. This should be associated with a type=22 or type=32 boundary condition. The list should match the order in which they appear in the fort.14 file
    * stage_discharge_relationship
        For models which have type=32 boundaries, the stage discharge relationship generated from the model (not from observation)
    * tide_boundary
        The tide boundary key specifies a set of key/value pairs where the key is the harmonic constituent and the value is an array of amplitude/phase along the open boundary as it appears in the fort.15. Valid harmonic constituent names are: Q1, O1, P1, K1, M2, N2, S2,

HEC-RAS
=======

The HEC-RAS configuration file is used to set the parameters used within the model, including which plan/geometry combination should be
used and how boundary conditions should be treated. The file is ALWAYS named :code:`config.json` and resides in a folder which contains the
model geometry files.

.. code-block:: json

    {
        "name": "model_name",
        "geometry": "geometry_name",
        "plan": 1,
        "geometry": 1,
        "flow_boundaries": [
            { "model": "AMITE_COMITE", "usgs": "07374000", "rfc": "btrl1" },
            { "model": "TICKFALLHOLDENOUTLET", "usgs": "07381490", "rfc": "smml1" }
        ]
    }

A description of the keys used in the model configuration file are below:

* name
    The name of the HEC-RAS model. This is used for annotation purposes for the user
* model
    The base name of the model that appears at the start of all model files
* geometry
    HEC-RAS geometry number to use
* plan
    HEC-RAS plan number to use
* flow_boundaries
    These are boundary conditions which will be configured to come from USGS and RFC sources. The :code:`model` key
    is the name of the boundary as it appears in the model geometry. The :code:`usgs` and :code:`rfc` keys are the
    names of the USGS and RFC stations to use for the boundary condition.

XBeach-1D
=========

The XBeach-1D configuration file is used to set the parameters used within the model, including the locations of the
transects that should be used. Since XBeach requires multiple input files per transect, they are organized in a directory
structure as follows:

.. code-block:: bash

    [transect_directory]
    ├── T0001
    │   ├── T0001_bedfric.txt
    │   ├── T0001_info.txt
    │   ├── T0001_XYdata.txt
    │   ├── x_file_tnsct_0001.txt
    │   └── y_file_tnsct_0001.txt
    ├── T0002
    │   ├── T0002_bedfric.txt
    │   ├── T0002_info.txt
    │   ├── T0002_XYdata.txt
    │   ├── x_file_tnsct_0002.txt
    │   └── y_file_tnsct_0002.txt

Transects are numbered with an integer identifier. They do not need to be sequential, but they must be unique.

The :code:`config.json` file that is used for the model will look like:

.. code-block:: json

    {
        "name": "model_name",
        "offshore_locations": "/path/to/offshore_locations.txt",
        "transect_directory": "/path/to/transect_directory"
    }

The :code:`offshore_locations` file is a text file which contains a list of the offshore locations where boundary condition
information is extracted. These should be in WGS84 coordinates. The file should look like:

.. code-block:: bash

    3    #...Point Count
    1 -97.0 28.0
    2 -97.1 28.1
    3 -97.2 28.2

Next, the info file contains some of the metrics of importance for the transect. The file should look like:

.. code-block:: bash

    T_ID    1
    alfa    -160.18654293903464
    Nx  885
    zdatum  0.26
    zone    18
    XD  1
    lon -75.53899999999999
    lat 35.7939
    date    2
    Dhigh   4.337309027117621
    Dlow    3.455597140294281
    DuneW   4.583310410496779
    DuneRH  0.8817118868233402
    DuneV   17.875586275913363
    BeachW  107.7077946466743
    BeachV  171.8288934989446
    BeachSlope  0.029669135374808753
    DepOfClosure    -11.077
    NearshoreSlp    0.008443387584221173


===============
Getting Started
===============

Floodwater is based on using Anaconda as an environment manager. This allows the user
to have multiple installations on their system without interfering with each other.

************
Installation
************

The installation of Floodwater uses a single Python script to manage the environment
creation within Anaconda. The script is called :code:`install.py` and is located in the
root directory of the repository.

Pre-requisites
==============

The following are pre-requisites for installing Floodwater:
  1. A system with a Linux distribution (e.g. Ubuntu, Debian, Rocky, etc.)
  2. Anaconda (https://www.anaconda.com/distribution/)
  3. Git (https://git-scm.com/downloads)
  4. A job manager (e.g. SLURM, PBS, etc.)
  5. Access to a MetGet instance.

.. note::
     If you do not have access to an instance,
     you can contact zcobell@thewaterinstitute.org or begin running your own
     instance by following the instructions on the `metget-server <https://github.com/waterinstitute/metget-server>`_
     GitHub page.

In the case that your system is based on ARM processors, you will need to build
the ecFlow package from source. This is recommended only for experienced users.
We have shown that the system works well on both ARM and x86_64 architectures,
however, ECMWF only provides pre-built binaries for x86_64.

Installation Steps
==================

The first step to installing Floodwater is to clone the repository:

.. code:: bash

    git clone https://github.com/waterinstitute/floodwater.git

This will create a directory called :code:`floodwater` in the current working directory.
You should then change into the :code:`floodwater` directory:

.. code:: bash

    cd floodwater

The installation should use the :code:`install.py` file. The script allows the user
to enable/disable certain features of Floodwater. For example, you may only want
to have the code of Floodwater installed on your local system so that you can run
the GUI.

Full Installation
-----------------

.. code:: bash

    python install.py --conda-name my-floodwater-env


.. warning::
    For all the good things about Anaconda, the default solver is extraordinarily slow. We highly
    recommend using the Mamba solver. This can be done by following the instructions
    `here <https://www.anaconda.com/blog/a-faster-conda-for-a-growing-community>`_.

Partial Installation
--------------------

A common use case is to install the full package on a remote system and then install only
the essential packages on the local system. The local system can access the remote system
over SSH which will allow a much more snappy experience.

.. code:: bash

    python install.py --conda-name my-floodwater-env --minimal

.. warning::
    It is also possible to forward an
    X11 connection over SSH so that the GUI can be used remotely, however, this will be slow,
    particularly if the remote system is not on the same network.

.. note::
   Developers will need to re-install the Floodwater package (not the full Anaconda environment)
   if they make changes to the code. This can be done by running the :code:`pip3 install .` from the
   :code:`src` directory.

Checking the Installation
-------------------------
To confirm that the installation was successful, you should activate the newly create
conda environment:

.. code:: bash

    conda activate my-floodwater-env

You can then check that the Floodwater package is installed by running:

.. code:: bash

    floodwater --help

*******************
ecFlow Server Setup
*******************

Systems based on the ecFlow workflow manager require that a server daemon is running.
The server is responsible for managing the workflows and the jobs that are submitted.
Note that many of the jobs within the system which aren't submitted to the job scheduler
(i.e. SLURM or PBS) are run directly on the server which is running the daemon. This
means that users should be considerate on shared systems and work with system administrators
in the event that there are too many concurrent processes on the system. In the past, we
have worked with system administrators on large NSF funded resources to provide a virtual machine
which is dedicated to running the server daemon.

Environment Variables
=====================

To avoid manually specifying the server host and port number during each Floodwater command,
we recommend setting the following environment variables:

.. code:: bash

    export ECF_HOST=hostname
    export ECF_PORT=port_number

The :code:`ECF_HOST` variable should be set to the hostname of the system which is running the
server daemon. The :code:`ECF_PORT` variable should be set to the port number which the server.
Note that the :code:`ECF_HOST` variable should be a fully qualified domain name (FQDN) which
can be resolved by the client system.

Starting the Server
===================

The server can be started by running the following command:

.. code:: bash

    floodwater server start [--port xxxx]

The port number is optional. If it is not supplied on the command line, the system will search for an
environment variable named :code:`ECF_PORT`. If this variable is not set, you will receive an error.

You can check that the server has become active by running:

.. code:: bash

    floodwater ping

This will ping the server and return the time it took to respond. This command uses
environment variables above to establish the connection to the server.

The system will return something that looks like the following:

.. code:: bash

    2023-10-13T08:56:07CDT :: INFO :: floodwater_cli_funcs.py :: floodwater_ping_ecflow :: Success! Ping ecFlow server (myhost.local:3121) succeeded in ~4 ms

Stopping the Server
===================

The server can be stopped by running the following command:

.. code:: bash

    floodwater server stop

**********************
Running Your First Job
**********************

The system comes packaged with a simple example which runs the ec95d ADCIRC
model. This is a very coarse model and should only be used for testing.

